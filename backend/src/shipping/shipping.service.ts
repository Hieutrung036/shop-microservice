import { Injectable } from '@nestjs/common';
import { ShippingMethod } from './shipping.controller';
import { GHNService } from './ghn.service';

interface CalculateShippingDto {
  province: string;
  district: string;
  ward: string;
  weight?: number;
  value?: number;
}

@Injectable()
export class ShippingService {
  constructor(private readonly ghnService: GHNService) {}

  // ƒê·ªãa ch·ªâ c·ª≠a h√†ng (ƒëi·ªÉm xu·∫•t ph√°t)
  private readonly STORE_ADDRESS = {
    province: 'Th√†nh ph·ªë H·ªì Ch√≠ Minh',
    district: 'Qu·∫≠n 7',
    ward: 'Ph∆∞·ªùng T√¢n H∆∞ng'
  };

  async calculateShipping(dto: CalculateShippingDto): Promise<ShippingMethod[]> {
    const { province, district, ward, weight = 500, value = 1000000 } = dto;

    console.log('üöö Shipping API called with:', { province, district, ward, weight, value });

    try {
      // L·∫•y ward_code v√† district_id cho ƒë·ªãa ch·ªâ ƒë√≠ch
      const toWardCode = await this.ghnService.getWardCode(province, district, ward);
      const toDistrictId = await this.ghnService.getDistrictId(province, district);
      
      console.log('üìç Location codes:', {
        from_district_id: 2027, // Qu·∫≠n 7, TP.HCM
        to_district_id: toDistrictId,
        to_ward_code: toWardCode,
        province,
        district,
        ward
      });
      
      // G·ªçi GHN API th·ª±c t·∫ø
      const ghnRequest = {
        service_type_id: 2, // Standard delivery
        insurance_value: value,
        to_ward_code: toWardCode,
        to_district_id: toDistrictId,
        from_district_id: 2027, // Qu·∫≠n 7, TP.HCM
        height: 10, // cm
        length: 20, // cm
        weight: weight, // gram
        width: 15, // cm
      };

      console.log('üöö GHN Request:', ghnRequest);

      const ghnResponse = await this.ghnService.calculateShipping(ghnRequest);

      console.log('üì¶ GHN real data:', ghnResponse);

      return [
        {
          id: 'ghn',
          name: ghnResponse.service_name,
          fee: ghnResponse.total_fee,
          delivery_time: ghnResponse.estimated_delivery_time,
          description: 'Giao h√†ng nhanh - d·ªØ li·ªáu th·ª±c t·∫ø t·ª´ GHN'
        },
        {
          id: 'standard',
          name: 'Giao h√†ng ti√™u chu·∫©n',
          fee: Math.round(ghnResponse.total_fee * 0.8), // Gi·∫£m 20% so v·ªõi GHN
          delivery_time: this.addDaysToDeliveryTime(ghnResponse.estimated_delivery_time, 1),
          description: 'Giao h√†ng ti√™u chu·∫©n'
        },
        {
          id: 'express',
          name: 'Giao h√†ng si√™u t·ªëc',
          fee: Math.round(ghnResponse.total_fee * 1.5), // TƒÉng 50% so v·ªõi GHN
          delivery_time: this.reduceDaysFromDeliveryTime(ghnResponse.estimated_delivery_time, 1),
          description: 'Giao h√†ng si√™u t·ªëc'
        }
      ];
    } catch (error) {
      console.error('‚ùå Error calling GHN API:', error);
      console.log('üîÑ Using fallback shipping methods...');
      // Fallback n·∫øu API l·ªói
      return this.getFallbackShippingMethods(dto);
    }
  }

  private addDaysToDeliveryTime(deliveryTime: string, days: number): string {
    // Logic th√™m ng√†y v√†o delivery_time
    if (deliveryTime.includes('1-2')) return '2-3 ng√†y';
    if (deliveryTime.includes('2-3')) return '3-4 ng√†y';
    if (deliveryTime.includes('3-5')) return '4-6 ng√†y';
    return deliveryTime;
  }

  private reduceDaysFromDeliveryTime(deliveryTime: string, days: number): string {
    // Logic gi·∫£m ng√†y t·ª´ delivery_time
    if (deliveryTime.includes('1-2')) return '1 ng√†y';
    if (deliveryTime.includes('2-3')) return '1-2 ng√†y';
    if (deliveryTime.includes('3-5')) return '2-3 ng√†y';
    return deliveryTime;
  }

  private getFallbackShippingMethods(dto: CalculateShippingDto): ShippingMethod[] {
    // Fallback data n·∫øu API l·ªói
    return [
      {
        id: 'standard',
        name: 'Giao h√†ng ti√™u chu·∫©n',
        fee: 20000,
        delivery_time: '2-3 ng√†y',
        description: 'Giao h√†ng ti√™u chu·∫©n'
      },
      {
        id: 'express',
        name: 'Giao h√†ng nhanh',
        fee: 35000,
        delivery_time: '1-2 ng√†y',
        description: 'Giao h√†ng nhanh'
      }
    ];
  }

  async getShippingMethods(): Promise<ShippingMethod[]> {
    // Tr·∫£ v·ªÅ danh s√°ch ph∆∞∆°ng th·ª©c giao h√†ng m·∫∑c ƒë·ªãnh
    return [
      {
        id: 'standard',
        name: 'Giao h√†ng ti√™u chu·∫©n',
        fee: 20000,
        delivery_time: '2-3 ng√†y',
        description: 'Giao h√†ng ti√™u chu·∫©n'
      },
      {
        id: 'express',
        name: 'Giao h√†ng nhanh',
        fee: 35000,
        delivery_time: '1-2 ng√†y',
        description: 'Giao h√†ng nhanh'
      },
      {
        id: 'ghn',
        name: 'Giao H√†ng Nhanh',
        fee: 25000,
        delivery_time: '1-2 ng√†y',
        description: 'Giao h√†ng nhanh - d·ªØ li·ªáu th·ª±c t·∫ø t·ª´ GHN'
      }
    ];
  }

  async testGHNConnection(): Promise<boolean> {
    return this.ghnService.testConnection();
  }
} 